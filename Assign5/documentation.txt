-------------------------- Data Structures -----------------------------------------

message : struct type
    buf -> stores the content of  message
    len -> stores length of content 
    flags -> stores flags provided by user

send_buffer : message ** type
    equivalent to Send_message table
    can stores a maximum of 10 messages

recv_buffer : message** type
    equivalent to Recv_message table
    can stores a maximum of 10 messages

-------------------------- Variables ------------------------------------------------

NOTE : We have considerd this problem as equivalent to standard bounded buffer producer consumer problem.
        So, below variables are similar to that.

send_count : int type
    stores no of messages currently in send table

recv_count : int type
    stores no of messages currently in recv table

send_in : int type
    stores the index in circular buffer [corresponding to Send_message table] where next element need to be inserted

send_out : int type
    stores the index in circular buffer [corresponding to Send_message table] where next element need to be removed

recv_in : int type
    stores the index in circular buffer [corresponding to Recv_message table] where next element need to be inserted

recv_out : int type
    stores the index in circular buffer [corresponding to Recv_message table] where next element need to be removed

MyTCP : int type
    stores the file descriptor through which all communications have to take place
    For example, in server, we communicate through newsockfd, but in client, we communicate through sockfd

recvMutex : pthread_mutex_t type
    lock corresponding to read-write in Recv_message table

sendMutex : pthread_mutex_t type
    lock corresponding to read-write in Recv_message table

------------------------------- Functions ----------------------------------------

int my_socket(int domain, int type, int protocol);
    It  creates  an endpoint for communication and returns a file de‐
    scriptor that refers to that endpoint.

int my_bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
    When a socket is created with my_socket(), it exists in a name space (ad‐
    dress family) but has no address assigned to it.   my_bind()  assigns  the
    address  specified  by  addr  to the socket referred to by the file de‐
    scriptor sockfd.  addrlen specifies the size, in bytes, of the  address
    structure  pointed to by addr

int my_listen(int sockfd, int backlog);
    my_listen()  marks  the  socket referred to by sockfd as a passive socket,
    that is, as a socket that will be used to  accept  incoming  connection
    requests using my_accept().

int my_accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
    It extracts the  first  connection  request  on  the  queue  
    of pending connections for the listening socket, sockfd, creates 
    a new connected socket, and returns a new file descriptor  referring  to that socket.

int my_connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
    The  my_connect()  function connects the socket referred to by the file
    descriptor sockfd to the address specified by addr.  The addrlen  argu‐
    ment  specifies the size of addr.

ssize_t my_send(int sockfd, void *buf, size_t len, int flags);
    The my_send() function sends data stored in buf of size
    len through sockfd

ssize_t my_recv(int sockfd, void *buf, size_t len, int flags);
    The my_recv() function receives data stored in buf of size
    len through sockfd

int my_close(int fd);
    my_close()  closes  a  file descriptor, so that it no longer refers to any
    file and may be reused.

void *recvThread(void *arg);
    It is the runner function for thread R & performs all recv operations
    as specified in problem statement.

void *sendThread(void *arg);
    It is the runner function for thread S & performs all send operations
    as specified in problem statement.

int findMin(int a, int b);
    Returns minimum of the two

---------------------------------- Description of Program execution --------------------------------------------

First we have created recvThread and sendThread. MyTCP is initialised to -1 and it will be changed
in Accept call and connect call. Since here client will only call connect and server will only
accept, MyTCP will get modified only once. The recvThread and sendThread will busy wait on this 
MyTCP. Once MyTCP is modified, they will start their execution. The recvThread will block until 
it gets some message then, it will insert it in the recv table, before inserting it will check
if locked or not, if not locked then insertion happens else it will wait. The sendThread will see 
if there is anything to send in send table, if yes then it will send it and remove it from the table.
In sendThread we first send message length in first 4 bytes and then send the message. In recvThread
we first receive message length in first 4 bytes(we recieve it so that 4 bytes are surely recieved) 
and then receive the message. The sendThread and my_send will busy wait on my_send and recvThread and 
my_recv will busy wait on recv_count.

my_send will check if send table is full(after locking) or not, if full then it will busy wait(during 
this it will unlock the lock). If not full then it will insert the message in send table and increment
send_count. After this it will unlock the lock. sendThread will busy wait on send_count and when has something
to send, it will remove from table after locking and send the message.

my_recv will check if recv table is empty(after locking) or not, if empty then it will busy wait(during
this it will unlock the lock). If not empty then it will remove the message from recv table and decrement
recv_count. After this it will unlock the lock.